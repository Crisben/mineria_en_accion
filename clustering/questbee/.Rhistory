procalculo<-merge(procalculo,na.omit(subtest("data/E.csv","E",c("q4","q7","q10","q13"),4)), all.x=TRUE)
#2. CONTAR ORALMENTE HACIA ATRAS (COA)
questbee.download("8a7483674a030963014a062b920a0017","data/COA.csv",key,password)
procalculo<-merge(procalculo,na.omit(subtest("data/COA.csv","COA",c("q1"),1)), all.x=TRUE)
#3. ESCRITURA DE NUMEROS (EN)
questbee.download("8a7483674a030963014a062c9977001d","data/EN.csv",key,password)
procalculo<-merge(procalculo,na.omit(subtest("data/EN.csv","EN",c("q4","q7","q10","q13","q16","q19"),1)), all.x=TRUE)
#4. CALCULO MENTAL ORAL (CMO)
questbee.download("8a7483674a945028014a9738cef60000","data/CMO.csv",key,password)
procalculo<-merge(procalculo,na.omit(subtest("data/CMO.csv","CMO",c("q3","q6","q9","q12","q15","q18","q22","q25","q28","q31","q34","q37"),1)), all.x=TRUE)
#5. LECTURA DE NUMEROS (LN)
questbee.download("8a7483674a030963014a0636e0cc008d","data/LN.csv",key,password)
procalculo<-merge(procalculo,na.omit(subtest("data/LN.csv","LN",c("q4","q7","q10","q13","q16","q19"),1)), all.x=TRUE)
#6. POSICIONAR UN NÚMERO EN UNA ESCALA (PE)
questbee.download("8a7483674a030963014a063ab98c00b4","data/PE.csv",key,password)
procalculo<-merge(procalculo,na.omit(subtest("data/PE.csv","PE",c("q4","q7","q10","q13","q16"),2)), all.x=TRUE)
#7. COMPARACIÓN ORAL DE DOS NÚMEROS (CON)
questbee.download("8a7483674a9ea44b014acf871b430261","data/CON.csv",key,password)
procalculo<-merge(procalculo,na.omit(subtest("data/CON.csv","CON",c("q4","q7","q10","q13","q16","q19","q22","q25"),1)), all.x=TRUE)
#8. ESTIMACIÓN PERCEPTIVA DE CANTIDAD (EPC)
questbee.download("8a7483674a2f0ba4014a3012f743008e","data/EPC.csv",key,password)
procalculo<-merge(procalculo,na.omit(subtest("data/EPC.csv","EPC",c("q2"),2)), all.x=TRUE)
#9. ESTIMACIÓN DE CANTIDADES EN CONTEXTO (ECC)
questbee.download("8a7483674a030963014a065068a4011e","data/ECC.csv",key,password)
procalculo<-merge(procalculo,na.omit(subtest("data/ECC.csv","ECC",c("q5","q8","q11","q14","q17"),2)), all.x=TRUE)
#10. RESOLUCIÓN DE PROBLEMAS ARITMÉTICOS (RPA)
questbee.download("8a7483674a5b77c7014a6f7477450244","data/RPA.csv",key,password)
procalculo<-merge(procalculo,na.omit(subtest("data/RPA.csv","RPA",c("q2","q5","q8","q11"),1)), all.x=TRUE)
#11. COMPARACIÓN DE DOS NÚMEROS EN CIFRAS (CNC)
questbee.download("8a7483674a030963014a065daaea0178","data/CNC.csv",key,password)
procalculo<-merge(procalculo,na.omit(subtest("data/CNC.csv","CNC",c("q4","q7","q10","q13","q16","q19","q22","q25"),2)), all.x=TRUE)
#12. DETERMINACIÓN DE CANTIDAD (DC)
questbee.download("8a7483674a9ea44b014acf854f590239","data/DC.csv",key,password)
procalculo<-merge(procalculo,na.omit(subtest("data/DC.csv","DC",c("q1","q4","q13","q15","q28","q31"),1)), all.x=TRUE)
#13. ESCRIBIR EN CIFRAS (EC)
questbee.download("8a7483674a030963014a0665663a01cb","data/EC.csv",key,password)
procalculo<-merge(procalculo,na.omit(subtest("data/EC.csv","EC",c("q1","q3","q5"),1)), all.x=TRUE)
#14. ESCRITURA CORRECTA DEL NÚMERO (ECN)
questbee.download("8a7483674a030963014a0668bf6b01d8","data/ECN.csv",key,password)
procalculo<-merge(procalculo,na.omit(subtest("data/ECN.csv","ECN",c("q2","q3","q4","q5","q6"),1)), all.x=TRUE)
#15. LECTURA ALFABÉTICA DE NÚMEROS Y ESCRITURA EN CIFRAS
questbee.download("8a7483674a030963014a065a90f20154","data/LAN.csv",key,password)
procalculo<-merge(procalculo,na.omit(subtest("data/LAN.csv","LAN",c("q2","q5","q8","q11","q14","q17","q20"),1)), all.x=TRUE)
View(procalculo)
View(procalculo)
key <- "key"
password <- "password"
t <- read.csv("procalculo_t.csv",sep="\t")
#INFORMACION GENERAL DE PARTICIPANTE
questbee.download("8a74836749da219f0149de8a71cc07c8","data/IGP.csv",key,password)
procalculo<-read.csv("data/IGP.csv",sep="\t")[,c("session","date","q1","user","type")]
colnames(procalculo) <- c("session","fecha","evaluado","evaluador","tipo")
#1. ENUMERACION (E)
questbee.download("8a7483674a030963014a0625ad050000","data/E.csv",key,password)
procalculo<-merge(procalculo,na.omit(subtest("data/E.csv","E",c("q4","q7","q10","q13"),4)), by="session", all.x=TRUE)
#2. CONTAR ORALMENTE HACIA ATRAS (COA)
questbee.download("8a7483674a030963014a062b920a0017","data/COA.csv",key,password)
procalculo<-merge(procalculo,na.omit(subtest("data/COA.csv","COA",c("q1"),1)), by="session", all.x=TRUE)
#3. ESCRITURA DE NUMEROS (EN)
questbee.download("8a7483674a030963014a062c9977001d","data/EN.csv",key,password)
procalculo<-merge(procalculo,na.omit(subtest("data/EN.csv","EN",c("q4","q7","q10","q13","q16","q19"),1)), by="session", all.x=TRUE)
#4. CALCULO MENTAL ORAL (CMO)
questbee.download("8a7483674a945028014a9738cef60000","data/CMO.csv",key,password)
procalculo<-merge(procalculo,na.omit(subtest("data/CMO.csv","CMO",c("q3","q6","q9","q12","q15","q18","q22","q25","q28","q31","q34","q37"),1)), by="session", all.x=TRUE)
#5. LECTURA DE NUMEROS (LN)
questbee.download("8a7483674a030963014a0636e0cc008d","data/LN.csv",key,password)
procalculo<-merge(procalculo,na.omit(subtest("data/LN.csv","LN",c("q4","q7","q10","q13","q16","q19"),1)), by="session", all.x=TRUE)
#6. POSICIONAR UN NÚMERO EN UNA ESCALA (PE)
questbee.download("8a7483674a030963014a063ab98c00b4","data/PE.csv",key,password)
procalculo<-merge(procalculo,na.omit(subtest("data/PE.csv","PE",c("q4","q7","q10","q13","q16"),2)), by="session", all.x=TRUE)
#7. COMPARACIÓN ORAL DE DOS NÚMEROS (CON)
questbee.download("8a7483674a9ea44b014acf871b430261","data/CON.csv",key,password)
procalculo<-merge(procalculo,na.omit(subtest("data/CON.csv","CON",c("q4","q7","q10","q13","q16","q19","q22","q25"),1)), by="session", all.x=TRUE)
#8. ESTIMACIÓN PERCEPTIVA DE CANTIDAD (EPC)
questbee.download("8a7483674a2f0ba4014a3012f743008e","data/EPC.csv",key,password)
procalculo<-merge(procalculo,na.omit(subtest("data/EPC.csv","EPC",c("q2"),2)), by="session", all.x=TRUE)
#9. ESTIMACIÓN DE CANTIDADES EN CONTEXTO (ECC)
questbee.download("8a7483674a030963014a065068a4011e","data/ECC.csv",key,password)
procalculo<-merge(procalculo,na.omit(subtest("data/ECC.csv","ECC",c("q5","q8","q11","q14","q17"),2)), by="session", all.x=TRUE)
#10. RESOLUCIÓN DE PROBLEMAS ARITMÉTICOS (RPA)
questbee.download("8a7483674a5b77c7014a6f7477450244","data/RPA.csv",key,password)
procalculo<-merge(procalculo,na.omit(subtest("data/RPA.csv","RPA",c("q2","q5","q8","q11"),1)), by="session", all.x=TRUE)
#11. COMPARACIÓN DE DOS NÚMEROS EN CIFRAS (CNC)
questbee.download("8a7483674a030963014a065daaea0178","data/CNC.csv",key,password)
procalculo<-merge(procalculo,na.omit(subtest("data/CNC.csv","CNC",c("q4","q7","q10","q13","q16","q19","q22","q25"),2)), by="session", all.x=TRUE)
#12. DETERMINACIÓN DE CANTIDAD (DC)
questbee.download("8a7483674a9ea44b014acf854f590239","data/DC.csv",key,password)
procalculo<-merge(procalculo,na.omit(subtest("data/DC.csv","DC",c("q1","q4","q13","q15","q28","q31"),1)), by="session", all.x=TRUE)
#13. ESCRIBIR EN CIFRAS (EC)
questbee.download("8a7483674a030963014a0665663a01cb","data/EC.csv",key,password)
procalculo<-merge(procalculo,na.omit(subtest("data/EC.csv","EC",c("q1","q3","q5"),1)), by="session", all.x=TRUE)
#14. ESCRITURA CORRECTA DEL NÚMERO (ECN)
questbee.download("8a7483674a030963014a0668bf6b01d8","data/ECN.csv",key,password)
procalculo<-merge(procalculo,na.omit(subtest("data/ECN.csv","ECN",c("q2","q3","q4","q5","q6"),1)), by="session", all.x=TRUE)
#15. LECTURA ALFABÉTICA DE NÚMEROS Y ESCRITURA EN CIFRAS
questbee.download("8a7483674a030963014a065a90f20154","data/LAN.csv",key,password)
procalculo<-merge(procalculo,na.omit(subtest("data/LAN.csv","LAN",c("q2","q5","q8","q11","q14","q17","q20"),1)), by="session", all.x=TRUE)
View(procalculo)
#INFORMACION GENERAL DE PARTICIPANTE
questbee.download("8a74836749da219f0149de8a71cc07c8","data/IGP.csv",key,password)
procalculo<-read.csv("data/IGP.csv",sep="\t")[,c("session","date","q1","user","type")]
colnames(procalculo) <- c("session","fecha","evaluado","evaluador","tipo")
#1. ENUMERACION (E)
questbee.download("8a7483674a030963014a0625ad050000","data/E.csv",key,password)
procalculo<-merge(procalculo,na.omit(subtest("data/E.csv","E",c("q4","q7","q10","q13"),4)), by="session", all.x=TRUE)
#2. CONTAR ORALMENTE HACIA ATRAS (COA)
View(procalculo)
View(procalculo)
?merge
questbee.download("8a74836749da219f0149de8a71cc07c8","data/IGP.csv",key,password)
procalculo<-read.csv("data/IGP.csv",sep="\t")[,c("session","date","q1","user","type")]
colnames(procalculo) <- c("session","fecha","evaluado","evaluador","tipo")
procalculo<-merge(procalculo,na.omit(subtest("data/E.csv","E",c("q4","q7","q10","q13"),4)), by="session", all.y=TRUE)
View(procalculo)
questbee.download("8a74836749da219f0149de8a71cc07c8","data/IGP.csv",key,password)
procalculo<-read.csv("data/IGP.csv",sep="\t")[,c("session","date","q1","user","type")]
colnames(procalculo) <- c("session","fecha","evaluado","evaluador","tipo")
#1. ENUMERACION (E)
questbee.download("8a7483674a030963014a0625ad050000","data/E.csv",key,password)
procalculo<-merge(procalculo,na.omit(subtest("data/E.csv","E",c("q4","q7","q10","q13"),4)), by="session", all.x=TRUE)
View(procalculo)
questbee.download("8a7483674a030963014a062b920a0017","data/COA.csv",key,password)
procalculo<-merge(procalculo,na.omit(subtest("data/COA.csv","COA",c("q1"),1)), by="session", all.x=TRUE)
#3. ESCRITURA DE NUMEROS (EN)
View(procalculo)
t_aux <- function(points,test){
value <- t[!is.na(t$P)&!is.na(points)&t$P==points,test]
if(length(value)>0){
return(value)
}
else{
return(NA)
}
}
t_points <- function(points,test){
value <- NULL
for(p in points){
value <- c(value,t_aux(p,test))
}
return(value)
}
subtest <- function(file,test,questions,factor){
data <- read.csv(file,sep="\t")
value <- 0
for(q in questions){
value <- data[,q] + value
}
scores <- value * factor
t_scores <- t_points(scores,test)
value <- data.frame(data$session,scores,t_scores)
colnames(value) <- c("session",test,paste(test,".t",sep=""))
value
}
questbee.download <- function(questionnaire,file,key,password){
url <- paste("http://www.questbee.com/questionnaire/download/",questionnaire,"?key=",key,"&password=",password,sep="")
download.file(url, file, "auto")
}
key <- "key"
password <- "password"
t <- read.csv("procalculo_t.csv",sep="\t")
#INFORMACION GENERAL DE PARTICIPANTE
questbee.download("8a74836749da219f0149de8a71cc07c8","data/IGP.csv",key,password)
procalculo<-read.csv("data/IGP.csv",sep="\t")[,c("session","date","q1","user","type")]
colnames(procalculo) <- c("session","fecha","evaluado","evaluador","tipo")
#1. ENUMERACION (E)
questbee.download("8a7483674a030963014a0625ad050000","data/E.csv",key,password)
procalculo<-merge(procalculo,na.omit(subtest("data/E.csv","E",c("q4","q7","q10","q13"),4)))
#2. CONTAR ORALMENTE HACIA ATRAS (COA)
questbee.download("8a7483674a030963014a062b920a0017","data/COA.csv",key,password)
procalculo<-merge(procalculo,na.omit(subtest("data/COA.csv","COA",c("q1"),1)))
#3. ESCRITURA DE NUMEROS (EN)
questbee.download("8a7483674a030963014a062c9977001d","data/EN.csv",key,password)
procalculo<-merge(procalculo,na.omit(subtest("data/EN.csv","EN",c("q4","q7","q10","q13","q16","q19"),1)))
#4. CALCULO MENTAL ORAL (CMO)
questbee.download("8a7483674a945028014a9738cef60000","data/CMO.csv",key,password)
procalculo<-merge(procalculo,na.omit(subtest("data/CMO.csv","CMO",c("q3","q6","q9","q12","q15","q18","q22","q25","q28","q31","q34","q37"),1)))
#5. LECTURA DE NUMEROS (LN)
questbee.download("8a7483674a030963014a0636e0cc008d","data/LN.csv",key,password)
procalculo<-merge(procalculo,na.omit(subtest("data/LN.csv","LN",c("q4","q7","q10","q13","q16","q19"),1)))
#6. POSICIONAR UN NÚMERO EN UNA ESCALA (PE)
questbee.download("8a7483674a030963014a063ab98c00b4","data/PE.csv",key,password)
procalculo<-merge(procalculo,na.omit(subtest("data/PE.csv","PE",c("q4","q7","q10","q13","q16"),2)))
#7. COMPARACIÓN ORAL DE DOS NÚMEROS (CON)
questbee.download("8a7483674a9ea44b014acf871b430261","data/CON.csv",key,password)
procalculo<-merge(procalculo,na.omit(subtest("data/CON.csv","CON",c("q4","q7","q10","q13","q16","q19","q22","q25"),1)))
#8. ESTIMACIÓN PERCEPTIVA DE CANTIDAD (EPC)
questbee.download("8a7483674a2f0ba4014a3012f743008e","data/EPC.csv",key,password)
procalculo<-merge(procalculo,na.omit(subtest("data/EPC.csv","EPC",c("q2"),2)))
#9. ESTIMACIÓN DE CANTIDADES EN CONTEXTO (ECC)
questbee.download("8a7483674a030963014a065068a4011e","data/ECC.csv",key,password)
procalculo<-merge(procalculo,na.omit(subtest("data/ECC.csv","ECC",c("q5","q8","q11","q14","q17"),2)))
#10. RESOLUCIÓN DE PROBLEMAS ARITMÉTICOS (RPA)
questbee.download("8a7483674a5b77c7014a6f7477450244","data/RPA.csv",key,password)
procalculo<-merge(procalculo,na.omit(subtest("data/RPA.csv","RPA",c("q2","q5","q8","q11"),1)))
#11. COMPARACIÓN DE DOS NÚMEROS EN CIFRAS (CNC)
questbee.download("8a7483674a030963014a065daaea0178","data/CNC.csv",key,password)
procalculo<-merge(procalculo,na.omit(subtest("data/CNC.csv","CNC",c("q4","q7","q10","q13","q16","q19","q22","q25"),2)))
#12. DETERMINACIÓN DE CANTIDAD (DC)
questbee.download("8a7483674a9ea44b014acf854f590239","data/DC.csv",key,password)
procalculo<-merge(procalculo,na.omit(subtest("data/DC.csv","DC",c("q1","q4","q13","q15","q28","q31"),1)))
#13. ESCRIBIR EN CIFRAS (EC)
questbee.download("8a7483674a030963014a0665663a01cb","data/EC.csv",key,password)
procalculo<-merge(procalculo,na.omit(subtest("data/EC.csv","EC",c("q1","q3","q5"),1)))
#14. ESCRITURA CORRECTA DEL NÚMERO (ECN)
questbee.download("8a7483674a030963014a0668bf6b01d8","data/ECN.csv",key,password)
procalculo<-merge(procalculo,na.omit(subtest("data/ECN.csv","ECN",c("q2","q3","q4","q5","q6"),1)))
#15. LECTURA ALFABÉTICA DE NÚMEROS Y ESCRITURA EN CIFRAS
questbee.download("8a7483674a030963014a065a90f20154","data/LAN.csv",key,password)
procalculo<-merge(procalculo,na.omit(subtest("data/LAN.csv","LAN",c("q2","q5","q8","q11","q14","q17","q20"),1)))
?write.csv
write.csv(procalculo,file="procalculo.csv")
write.csv(procalculo,file="procalculo.csv",sep="\t")
write.table(procalculo,file="procalculo.csv",sep="\t")
write.table(procalculo,file="procalculo.csv",sep="\t",row.names = FALSE)
###############################################
key <- "key"
password <- "password"
t <- read.csv("procalculo_t.csv",sep="\t")
#INFORMACION GENERAL DE PARTICIPANTE
questbee.download("8a74836749da219f0149de8a71cc07c8","data/IGP.csv",key,password)
procalculo<-read.csv("data/IGP.csv",sep="\t")[,c("session","date","q1","user","type")]
colnames(procalculo) <- c("session","fecha","evaluado","evaluador","tipo")
#1. ENUMERACION (E)
questbee.download("8a7483674a030963014a0625ad050000","data/E.csv",key,password)
procalculo<-merge(procalculo,(subtest("data/E.csv","E",c("q4","q7","q10","q13"),4)))
#2. CONTAR ORALMENTE HACIA ATRAS (COA)
key <- "key"
password <- "password"
t <- read.csv("procalculo_t.csv",sep="\t")
#INFORMACION GENERAL DE PARTICIPANTE
questbee.download("8a74836749da219f0149de8a71cc07c8","data/IGP.csv",key,password)
procalculo<-read.csv("data/IGP.csv",sep="\t")[,c("session","date","q1","user","type")]
colnames(procalculo) <- c("session","fecha","evaluado","evaluador","tipo")
#1. ENUMERACION (E)
questbee.download("8a7483674a030963014a0625ad050000","data/E.csv",key,password)
procalculo<-merge(procalculo,subtest("data/E.csv","E",c("q4","q7","q10","q13"),4))
#2. CONTAR ORALMENTE HACIA ATRAS (COA)
questbee.download("8a7483674a030963014a062b920a0017","data/COA.csv",key,password)
procalculo<-merge(procalculo,subtest("data/COA.csv","COA",c("q1"),1))
#3. ESCRITURA DE NUMEROS (EN)
questbee.download("8a7483674a030963014a062c9977001d","data/EN.csv",key,password)
procalculo<-merge(procalculo,subtest("data/EN.csv","EN",c("q4","q7","q10","q13","q16","q19"),1))
#4. CALCULO MENTAL ORAL (CMO)
questbee.download("8a7483674a945028014a9738cef60000","data/CMO.csv",key,password)
procalculo<-merge(procalculo,subtest("data/CMO.csv","CMO",c("q3","q6","q9","q12","q15","q18","q22","q25","q28","q31","q34","q37"),1))
#5. LECTURA DE NUMEROS (LN)
questbee.download("8a7483674a030963014a0636e0cc008d","data/LN.csv",key,password)
procalculo<-merge(procalculo,subtest("data/LN.csv","LN",c("q4","q7","q10","q13","q16","q19"),1))
#6. POSICIONAR UN NÚMERO EN UNA ESCALA (PE)
questbee.download("8a7483674a030963014a063ab98c00b4","data/PE.csv",key,password)
procalculo<-merge(procalculo,subtest("data/PE.csv","PE",c("q4","q7","q10","q13","q16"),2))
#7. COMPARACIÓN ORAL DE DOS NÚMEROS (CON)
questbee.download("8a7483674a9ea44b014acf871b430261","data/CON.csv",key,password)
procalculo<-merge(procalculo,subtest("data/CON.csv","CON",c("q4","q7","q10","q13","q16","q19","q22","q25"),1))
#8. ESTIMACIÓN PERCEPTIVA DE CANTIDAD (EPC)
questbee.download("8a7483674a2f0ba4014a3012f743008e","data/EPC.csv",key,password)
procalculo<-merge(procalculo,subtest("data/EPC.csv","EPC",c("q2"),2))
#9. ESTIMACIÓN DE CANTIDADES EN CONTEXTO (ECC)
questbee.download("8a7483674a030963014a065068a4011e","data/ECC.csv",key,password)
procalculo<-merge(procalculo,subtest("data/ECC.csv","ECC",c("q5","q8","q11","q14","q17"),2))
#10. RESOLUCIÓN DE PROBLEMAS ARITMÉTICOS (RPA)
questbee.download("8a7483674a5b77c7014a6f7477450244","data/RPA.csv",key,password)
procalculo<-merge(procalculo,subtest("data/RPA.csv","RPA",c("q2","q5","q8","q11"),1))
#11. COMPARACIÓN DE DOS NÚMEROS EN CIFRAS (CNC)
questbee.download("8a7483674a030963014a065daaea0178","data/CNC.csv",key,password)
procalculo<-merge(procalculo,subtest("data/CNC.csv","CNC",c("q4","q7","q10","q13","q16","q19","q22","q25"),2))
#12. DETERMINACIÓN DE CANTIDAD (DC)
questbee.download("8a7483674a9ea44b014acf854f590239","data/DC.csv",key,password)
procalculo<-merge(procalculo,subtest("data/DC.csv","DC",c("q1","q4","q13","q15","q28","q31"),1))
#13. ESCRIBIR EN CIFRAS (EC)
questbee.download("8a7483674a030963014a0665663a01cb","data/EC.csv",key,password)
procalculo<-merge(procalculo,subtest("data/EC.csv","EC",c("q1","q3","q5"),1))
#14. ESCRITURA CORRECTA DEL NÚMERO (ECN)
questbee.download("8a7483674a030963014a0668bf6b01d8","data/ECN.csv",key,password)
procalculo<-merge(procalculo,subtest("data/ECN.csv","ECN",c("q2","q3","q4","q5","q6"),1))
#15. LECTURA ALFABÉTICA DE NÚMEROS Y ESCRITURA EN CIFRAS
questbee.download("8a7483674a030963014a065a90f20154","data/LAN.csv",key,password)
procalculo<-merge(procalculo,subtest("data/LAN.csv","LAN",c("q2","q5","q8","q11","q14","q17","q20"),1))
View(procalculo)
write.table(procalculo,file="procalculo2.csv",sep="\t",row.names = FALSE)
?merge
x <- c(100,25000)
y <- c(10,25000)
lm(y~x)
x <- c(100,25000)
y <- c(10,2500)
lm(y~x)
x <- c(100,25000)
y <- c(10,1250)
lm(y~x)
amplitud <- 5
factor <- 0.05
amplitud/(0.1-factor)
table(abs(dataURB$DIFERENCIA)<=amplitud+dataURB$AREA_GRAFICA*factor)/length(dataURB$AREA_GRAFICA)*100
table(dataURB$segmento,abs(dataURB$DIFERENCIA)<=amplitud+dataURB$AREA_GRAFICA*factor)
setwd("/home/mario/Dropbox/Catastro Quito 2015")
data <- read.csv("AREA_DMC.csv",sep=",",stringsAsFactors=TRUE)
data$DIFERENCIA <- data$AREA_LOTE-data$AREA_GRAFICA
data$NIVEL <- as.factor(data$NIVEL)
data$TOPOGRAFIA <- as.factor(data$TOPOGRAFIA)
data$X. <- data$DIFERENCIA / data$AREA_GRAFICA *100
data$Y. <- data$DIFERENCIA / data$AREA_LOTE *100
data$ETAM <- as.numeric(data$ETAM)
library(ggplot2)
#URB
dataURB <- data[data$TIPO=="URB",]
lowerURB <- c(0,100,200,300,600,1000,2500,5000,10000,25000)
dataURB$segmento <- 0
for(segmento in lowerURB){
dataURB$segmento[dataURB$AREA_GRAFICA/segmento>=1]<-segmento
}
amplitud <- 5
factor <- 0.05
amplitud/(0.1-factor)
data.frame(lowerURB,(amplitud/lowerURB+factor)*100)
x <- c(100,25000)
y <- c(10,1250/2)
lm(y~x)
amplitud <- 7.53
factor <- 0.025
amplitud/(0.1-factor)
data.frame(lowerURB,(amplitud/lowerURB+factor)*100)
x <- c(100,25000)
y <- c(10,1250/4)
lm(y~x)
amplitud <- 8.78
factor <- 0.012
amplitud/(0.1-factor)
data.frame(lowerURB,(amplitud/lowerURB+factor)*100)
x <- c(100,25000)
y <- c(10,1250/3)
lm(y~x)
amplitud <- 8.37
factor <- 0.016
amplitud/(0.1-factor)
data.frame(lowerURB,(amplitud/lowerURB+factor)*100)
table(abs(dataURB$DIFERENCIA)<=amplitud+dataURB$segmento*factor)/length(dataURB$segmento)*100
x <- c(100,25000)
y <- c(10,1250/2)
lm(y~x)
amplitud <- 7.53
factor <- 0.025
amplitud/(0.1-factor)
data.frame(lowerURB,(amplitud/lowerURB+factor)*100)
table(abs(dataURB$DIFERENCIA)<=amplitud+dataURB$segmento*factor)/length(dataURB$segmento)*100
x <- c(100,25000)
y <- c(10,1250)
lm(y~x)
x <- c(100,25000)
y <- c(10,1250/1.5)
lm(y~x)
amplitud <- 6.7
factor <- 0.033
amplitud/(0.1-factor)
data.frame(lowerURB,(amplitud/lowerURB+factor)*100)
table(abs(dataURB$DIFERENCIA)<=amplitud+dataURB$segmento*factor)/length(dataURB$segmento)*100
x <- c(200,25000)
y <- c(18,1250/1.5)
lm(y~x)
amplitud <- 11.42
factor <- 0.033
amplitud/(0.1-factor)
data.frame(lowerURB,(amplitud/lowerURB+factor)*100)
table(abs(dataURB$DIFERENCIA)<=amplitud+dataURB$segmento*factor)/length(dataURB$segmento)*100
1250/1.5
x <- c(200,25000)
y <- c(18,1000)
lm(y~x)
amplitud <- 10
factor <- 0.04
amplitud/(0.1-factor)
data.frame(lowerURB,(amplitud/lowerURB+factor)*100)
table(abs(dataURB$DIFERENCIA)<=amplitud+dataURB$segmento*factor)/length(dataURB$segmento)*100
x <- c(100,25000)
y <- c(10,1250)
lm(y~x)
amplitud <- 5.02
factor <- 0.05
amplitud/(0.1-factor)
amplitud <- 5
factor <- 0.05
amplitud/(0.1-factor)
data.frame(lowerURB,(amplitud/lowerURB+factor)*100)
table(abs(dataURB$DIFERENCIA)<=amplitud+dataURB$AREA_GRAFICA*factor)/length(dataURB$AREA_GRAFICA)*100
table(dataURB$segmento,abs(dataURB$DIFERENCIA)<=amplitud+dataURB$AREA_GRAFICA*factor)
porcentajeURB <- c(10,9,8,6,4,3,2,1.75,1.5,1)/100
dataURB$porcentaje <- 0
for(pos in 1:length(lowerURB)){
dataURB$porcentaje[dataURB$segmento==lowerURB[pos]]<-porcentajeURB[pos]
}
table(abs(dataURB$DIFERENCIA)<=dataURB$AREA_GRAFICA*dataURB$porcentaje)/length(dataURB$porcentaje)*100
table(dataURB$segmento,abs(dataURB$DIFERENCIA)<=dataURB$AREA_GRAFICA*dataURB$porcentaje)/length(dataURB$porcentaje)*100
table(dataURB$segmento,abs(dataURB$DIFERENCIA)<=amplitud+dataURB$AREA_GRAFICA*factor)
table(dataURB$segmento,abs(dataURB$DIFERENCIA)<=dataURB$AREA_GRAFICA*dataURB$porcentaje)
setwd("/home/mario/mineria_en_accion/clustering/questbee")
download.file("questbee.com/questionnaire/download/8a74836747ee55840147f3e66d800001", "potential.csv", "auto")
download.file("http://www.questbee.com/questionnaire/download/8a74836747ee55840147f3e66d800001", "potential.csv", "auto")
questbee.download <- function(questionnaire,file,key,password){
url <- paste("http://www.questbee.com/questionnaire/download/",questionnaire,"?key=",key,"&password=",password,sep="")
download.file(url, file, "auto")
}
key <- "8a7483674b7f31c0014be1c06d7e0139"
password <- "6ZH1HHOHD6SM4UVPPC0IXBZ0W4WS1EMXN2RZINMTXJ0XO9NI93"
questbee.download("8a74836747ee55840147f3e66d800001","potential.csv",key,password)
data <- read.delim2("potential.csv",header=FALSE,stringsAsFactors=FALSE)
View(data)
View(data)
option.variables <- c("V4","V5","V7","V8","V9","V10","V11","V12","V13","V15","V16","V17","V18")
checkbox.variables <- data.frame(name=c("V6","V14"),min=c(0,0),max=c(2,2))
#Split data between brackets
for(pos in 1:nrow(checkbox.variables)){
name <- as.character(checkbox.variables$name[pos])
col <- strsplit(gsub("\\]","",gsub("\\[","",data[,name])),", ")
for(m in checkbox.variables$min[pos]:checkbox.variables$max[pos]){
data[paste(name,as.character(m),sep=".")]<-as.array(unlist(lapply(col,function(x){any(as.numeric(x)==m)})))
}
}
data <- read.delim2("potential.csv",header=TRUE,stringsAsFactors=FALSE)
View(data)
View(data)
option.variables <- c("q1","q2","q4","q5","q6","q7","q8","q9","q10","q12","q13","q14","q15")
checkbox.variables <- data.frame(name=c("q3","q11"),min=c(0,0),max=c(2,2))
for(pos in 1:nrow(checkbox.variables)){
name <- as.character(checkbox.variables$name[pos])
col <- strsplit(gsub("\\]","",gsub("\\[","",data[,name])),", ")
for(m in checkbox.variables$min[pos]:checkbox.variables$max[pos]){
data[paste(name,as.character(m),sep=".")]<-as.array(unlist(lapply(col,function(x){any(as.numeric(x)==m)})))
}
}
checkbox.variables$size <- checkbox.variables$max - checkbox.variables$min + 1
checkbox.new.variables <- NULL
checkbox.weigth.variables <- NULL
for(pos in 1:nrow(checkbox.variables)){
for(m in checkbox.variables$min[pos]:checkbox.variables$max[pos]){
checkbox.new.variables <- c(checkbox.new.variables,paste(as.character(checkbox.variables$name[pos]),as.character(m),sep="."))
checkbox.weigth.variables <- c(checkbox.weigth.variables,1/checkbox.variables$size[pos])
}
}
data.rows <- nrow(data)
from <- NULL
to <- NULL
distance <- NULL
for(i in 1:data.rows){
for(j in 1:data.rows){
from <- c(from, data$V3[i])
to <- c(to, data$V3[j])
d <- (sum(as.numeric(data[i,option.variables]==data[j,option.variables]),na.rm=TRUE)+
sum(as.numeric(data[i,checkbox.new.variables]==data[j,checkbox.new.variables])*checkbox.weigth.variables,na.rm=TRUE))/
(length(option.variables)+nrow(checkbox.variables))
distance <- c(distance,d)
}
}
data.rows <- nrow(data)
from <- NULL
to <- NULL
distance <- NULL
for(i in 1:data.rows){
for(j in 1:data.rows){
from <- c(from, data$user[i])
to <- c(to, data$user[j])
d <- (sum(as.numeric(data[i,option.variables]==data[j,option.variables]),na.rm=TRUE)+
sum(as.numeric(data[i,checkbox.new.variables]==data[j,checkbox.new.variables])*checkbox.weigth.variables,na.rm=TRUE))/
(length(option.variables)+nrow(checkbox.variables))
distance <- c(distance,d)
}
}
distance.matrix <- matrix(distance,nrow=10,ncol=10)
colnames(distance.matrix)<-data$user
rownames(distance.matrix)<-data$user
d <- dist(distance.matrix)
fit <- hclust(d, method="ward.D")
plot(fit) # display dendogram
groups <- cutree(fit, k=3) # cut tree into 3 clusters
# draw dendogram with red borders around the 3 clusters
rect.hclust(fit, k=3, border="red")
complete.cases(data)
data<-data[complete.cases(data),]
option.variables <- c("q1","q2","q4","q5","q6","q7","q8","q9","q10","q12","q13","q14","q15")
checkbox.variables <- data.frame(name=c("q3","q11"),min=c(0,0),max=c(2,2))
for(pos in 1:nrow(checkbox.variables)){
name <- as.character(checkbox.variables$name[pos])
col <- strsplit(gsub("\\]","",gsub("\\[","",data[,name])),", ")
for(m in checkbox.variables$min[pos]:checkbox.variables$max[pos]){
data[paste(name,as.character(m),sep=".")]<-as.array(unlist(lapply(col,function(x){any(as.numeric(x)==m)})))
}
}
#Create dummy variables for checkbox options
checkbox.variables$size <- checkbox.variables$max - checkbox.variables$min + 1
checkbox.new.variables <- NULL
checkbox.weigth.variables <- NULL
for(pos in 1:nrow(checkbox.variables)){
for(m in checkbox.variables$min[pos]:checkbox.variables$max[pos]){
checkbox.new.variables <- c(checkbox.new.variables,paste(as.character(checkbox.variables$name[pos]),as.character(m),sep="."))
checkbox.weigth.variables <- c(checkbox.weigth.variables,1/checkbox.variables$size[pos])
}
}
# Compute distance between individuals
data.rows <- nrow(data)
from <- NULL
to <- NULL
distance <- NULL
for(i in 1:data.rows){
for(j in 1:data.rows){
from <- c(from, data$user[i])
to <- c(to, data$user[j])
d <- (sum(as.numeric(data[i,option.variables]==data[j,option.variables]),na.rm=TRUE)+
sum(as.numeric(data[i,checkbox.new.variables]==data[j,checkbox.new.variables])*checkbox.weigth.variables,na.rm=TRUE))/
(length(option.variables)+nrow(checkbox.variables))
distance <- c(distance,d)
}
}
nrow(data)
